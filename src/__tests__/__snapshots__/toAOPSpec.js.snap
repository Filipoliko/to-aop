// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod 1`] = `
Array [
  Object {
    "args": Array [
      Object {},
      1,
    ],
    "context": bound  {},
    "object": A {
      "constructor": [Function],
      "method": [Function],
    },
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod 2`] = `
Array [
  Object {
    "args": Array [
      Object {},
      1,
    ],
    "context": bound  {},
    "object": A {
      "constructor": [Function],
      "method": [Function],
    },
    "payload": "method",
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod after class is instanced 1`] = `
Array [
  Object {
    "args": Array [
      Object {},
      1,
    ],
    "context": undefined,
    "object": A {},
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod after class is instanced 2`] = `
Array [
  Object {
    "args": Array [
      Object {},
      1,
    ],
    "context": undefined,
    "object": A {},
    "payload": "method",
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod for extended class 1`] = `
Array [
  Object {
    "args": Array [
      Object {},
      1,
    ],
    "context": undefined,
    "object": A {
      "variable": "method",
    },
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod for extended class 2`] = `
Array [
  Object {
    "args": Array [
      Object {},
      1,
    ],
    "context": undefined,
    "object": A {
      "variable": "method",
    },
    "payload": "method",
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod for extended classes with same ancestor 1`] = `
Array [
  Object {
    "args": Array [
      Object {},
      1,
    ],
    "context": undefined,
    "object": A {},
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod for extended classes with same ancestor 2`] = `
Array [
  Object {
    "args": Array [
      Object {},
      1,
    ],
    "context": undefined,
    "object": A {},
    "payload": "method",
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for instance should call pattern.beforeMethod and pattern.afterMethod 1`] = `
Array [
  Object {
    "args": Array [
      Object {},
      1,
    ],
    "context": undefined,
    "object": A {
      "variable": undefined,
      Symbol(AopOriginalTarget): true,
    },
    "property": "method",
    "target": A {
      "variable": undefined,
      Symbol(AopOriginalTarget): true,
    },
  },
]
`;

exports[`createAspect method for instance should call pattern.beforeMethod and pattern.afterMethod 2`] = `
Array [
  Object {
    "args": Array [
      Object {},
      1,
    ],
    "context": undefined,
    "object": A {
      "variable": undefined,
      Symbol(AopOriginalTarget): true,
    },
    "payload": undefined,
    "property": "method",
    "target": A {
      "variable": undefined,
      Symbol(AopOriginalTarget): true,
    },
  },
]
`;
